/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * PetPet API
 * Backend API for PetPet online pet shop and adoption platform
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DashboardStatsDtoApiResponse,
  LowStockProductDtoListApiResponse
} from '../petPetAPI.schemas';

import { customAxios } from '../../axios';




export const getApiAdminDashboardStats = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxios<DashboardStatsDtoApiResponse>(
      {url: `http://localhost:8080/api/Admin/dashboard/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiAdminDashboardStatsQueryKey = () => {
    return [`http://localhost:8080/api/Admin/dashboard/stats`] as const;
    }

    
export const getGetApiAdminDashboardStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminDashboardStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminDashboardStats>>> = ({ signal }) => getApiAdminDashboardStats(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAdminDashboardStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminDashboardStats>>>
export type GetApiAdminDashboardStatsQueryError = unknown


export function useGetApiAdminDashboardStats<TData = Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminDashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getApiAdminDashboardStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAdminDashboardStats<TData = Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminDashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getApiAdminDashboardStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAdminDashboardStats<TData = Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiAdminDashboardStats<TData = Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminDashboardStats>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAdminDashboardStatsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiAdminProductsLowStock = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxios<LowStockProductDtoListApiResponse>(
      {url: `http://localhost:8080/api/Admin/products/low-stock`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiAdminProductsLowStockQueryKey = () => {
    return [`http://localhost:8080/api/Admin/products/low-stock`] as const;
    }

    
export const getGetApiAdminProductsLowStockQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAdminProductsLowStockQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminProductsLowStock>>> = ({ signal }) => getApiAdminProductsLowStock(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAdminProductsLowStockQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminProductsLowStock>>>
export type GetApiAdminProductsLowStockQueryError = unknown


export function useGetApiAdminProductsLowStock<TData = Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminProductsLowStock>>,
          TError,
          Awaited<ReturnType<typeof getApiAdminProductsLowStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAdminProductsLowStock<TData = Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminProductsLowStock>>,
          TError,
          Awaited<ReturnType<typeof getApiAdminProductsLowStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAdminProductsLowStock<TData = Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiAdminProductsLowStock<TData = Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminProductsLowStock>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAdminProductsLowStockQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



