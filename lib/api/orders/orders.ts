/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * PetPet API
 * Backend API for PetPet online pet shop and adoption platform
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateOrderDto,
  GetApiOrdersMyOrdersParams,
  GetApiOrdersParams,
  OrderDtoApiResponse,
  OrderDtoPagedResultApiResponse,
  UpdateOrderStatusDto
} from '../petPetAPI.schemas';

import { customAxios } from '../../axios';




export const postApiOrders = (
    createOrderDto: CreateOrderDto,
 signal?: AbortSignal
) => {
      
      
      return customAxios<OrderDtoApiResponse>(
      {url: `http://localhost:8080/api/Orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderDto, signal
    },
      );
    }
  


export const getPostApiOrdersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrders>>, TError,{data: CreateOrderDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrders>>, TError,{data: CreateOrderDto}, TContext> => {

const mutationKey = ['postApiOrders'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrders>>, {data: CreateOrderDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrders(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOrdersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrders>>>
    export type PostApiOrdersMutationBody = CreateOrderDto
    export type PostApiOrdersMutationError = unknown

    export const usePostApiOrders = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrders>>, TError,{data: CreateOrderDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiOrders>>,
        TError,
        {data: CreateOrderDto},
        TContext
      > => {

      const mutationOptions = getPostApiOrdersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiOrders = (
    params?: GetApiOrdersParams,
 signal?: AbortSignal
) => {
      
      
      return customAxios<OrderDtoPagedResultApiResponse>(
      {url: `http://localhost:8080/api/Orders`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiOrdersQueryKey = (params?: GetApiOrdersParams,) => {
    return [`http://localhost:8080/api/Orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrders>>, TError = unknown>(params?: GetApiOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrders>>> = ({ signal }) => getApiOrders(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrders>>>
export type GetApiOrdersQueryError = unknown


export function useGetApiOrders<TData = Awaited<ReturnType<typeof getApiOrders>>, TError = unknown>(
 params: undefined |  GetApiOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrders>>,
          TError,
          Awaited<ReturnType<typeof getApiOrders>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrders<TData = Awaited<ReturnType<typeof getApiOrders>>, TError = unknown>(
 params?: GetApiOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrders>>,
          TError,
          Awaited<ReturnType<typeof getApiOrders>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrders<TData = Awaited<ReturnType<typeof getApiOrders>>, TError = unknown>(
 params?: GetApiOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrders<TData = Awaited<ReturnType<typeof getApiOrders>>, TError = unknown>(
 params?: GetApiOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiOrdersMyOrders = (
    params?: GetApiOrdersMyOrdersParams,
 signal?: AbortSignal
) => {
      
      
      return customAxios<OrderDtoPagedResultApiResponse>(
      {url: `http://localhost:8080/api/Orders/my-orders`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiOrdersMyOrdersQueryKey = (params?: GetApiOrdersMyOrdersParams,) => {
    return [`http://localhost:8080/api/Orders/my-orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiOrdersMyOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError = unknown>(params?: GetApiOrdersMyOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrdersMyOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrdersMyOrders>>> = ({ signal }) => getApiOrdersMyOrders(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrdersMyOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrdersMyOrders>>>
export type GetApiOrdersMyOrdersQueryError = unknown


export function useGetApiOrdersMyOrders<TData = Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError = unknown>(
 params: undefined |  GetApiOrdersMyOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersMyOrders>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersMyOrders>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrdersMyOrders<TData = Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError = unknown>(
 params?: GetApiOrdersMyOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersMyOrders>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersMyOrders>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrdersMyOrders<TData = Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError = unknown>(
 params?: GetApiOrdersMyOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrdersMyOrders<TData = Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError = unknown>(
 params?: GetApiOrdersMyOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMyOrders>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrdersMyOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiOrdersId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customAxios<OrderDtoApiResponse>(
      {url: `http://localhost:8080/api/Orders/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOrdersIdQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/Orders/${id}`] as const;
    }

    
export const getGetApiOrdersIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrdersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrdersId>>> = ({ signal }) => getApiOrdersId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrdersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrdersId>>>
export type GetApiOrdersIdQueryError = unknown


export function useGetApiOrdersId<TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrdersId<TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrdersId<TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrdersId<TData = Awaited<ReturnType<typeof getApiOrdersId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrdersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiOrdersIdStatus = (
    id: number,
    updateOrderStatusDto: UpdateOrderStatusDto,
 ) => {
      
      
      return customAxios<OrderDtoApiResponse>(
      {url: `http://localhost:8080/api/Orders/${id}/status`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateOrderStatusDto
    },
      );
    }
  


export const getPutApiOrdersIdStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersIdStatus>>, TError,{id: number;data: UpdateOrderStatusDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersIdStatus>>, TError,{id: number;data: UpdateOrderStatusDto}, TContext> => {

const mutationKey = ['putApiOrdersIdStatus'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOrdersIdStatus>>, {id: number;data: UpdateOrderStatusDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiOrdersIdStatus(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiOrdersIdStatusMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOrdersIdStatus>>>
    export type PutApiOrdersIdStatusMutationBody = UpdateOrderStatusDto
    export type PutApiOrdersIdStatusMutationError = unknown

    export const usePutApiOrdersIdStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersIdStatus>>, TError,{id: number;data: UpdateOrderStatusDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiOrdersIdStatus>>,
        TError,
        {id: number;data: UpdateOrderStatusDto},
        TContext
      > => {

      const mutationOptions = getPutApiOrdersIdStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    