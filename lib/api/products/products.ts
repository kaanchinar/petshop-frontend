/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * PetPet API
 * Backend API for PetPet online pet shop and adoption platform
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BooleanApiResponse,
  CreateProductDto,
  GetApiProductsParams,
  ProductDtoApiResponse,
  ProductDtoListApiResponse,
  ProductDtoPagedResultApiResponse,
  UpdateProductDto
} from '../petPetAPI.schemas';

import { customAxios } from '../../axios';




export const getApiProducts = (
    params?: GetApiProductsParams,
 signal?: AbortSignal
) => {
      
      
      return customAxios<ProductDtoPagedResultApiResponse>(
      {url: `http://localhost:8080/api/Products`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiProductsQueryKey = (params?: GetApiProductsParams,) => {
    return [`http://localhost:8080/api/Products`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiProductsQueryOptions = <TData = Awaited<ReturnType<typeof getApiProducts>>, TError = unknown>(params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProducts>>> = ({ signal }) => getApiProducts(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProducts>>>
export type GetApiProductsQueryError = unknown


export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = unknown>(
 params: undefined |  GetApiProductsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProducts>>,
          TError,
          Awaited<ReturnType<typeof getApiProducts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = unknown>(
 params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProducts>>,
          TError,
          Awaited<ReturnType<typeof getApiProducts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = unknown>(
 params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = unknown>(
 params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiProducts = (
    createProductDto: CreateProductDto,
 signal?: AbortSignal
) => {
      
      
      return customAxios<ProductDtoApiResponse>(
      {url: `http://localhost:8080/api/Products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductDto, signal
    },
      );
    }
  


export const getPostApiProductsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: CreateProductDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: CreateProductDto}, TContext> => {

const mutationKey = ['postApiProducts'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProducts>>, {data: CreateProductDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiProducts(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProducts>>>
    export type PostApiProductsMutationBody = CreateProductDto
    export type PostApiProductsMutationError = unknown

    export const usePostApiProducts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: CreateProductDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiProducts>>,
        TError,
        {data: CreateProductDto},
        TContext
      > => {

      const mutationOptions = getPostApiProductsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiProductsId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customAxios<ProductDtoApiResponse>(
      {url: `http://localhost:8080/api/Products/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiProductsIdQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/Products/${id}`] as const;
    }

    
export const getGetApiProductsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductsId>>> = ({ signal }) => getApiProductsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductsId>>>
export type GetApiProductsIdQueryError = unknown


export function useGetApiProductsId<TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductsId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductsId<TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductsId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductsId<TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProductsId<TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiProductsId = (
    id: number,
    updateProductDto: UpdateProductDto,
 ) => {
      
      
      return customAxios<ProductDtoApiResponse>(
      {url: `http://localhost:8080/api/Products/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductDto
    },
      );
    }
  


export const getPutApiProductsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductsId>>, TError,{id: number;data: UpdateProductDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiProductsId>>, TError,{id: number;data: UpdateProductDto}, TContext> => {

const mutationKey = ['putApiProductsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiProductsId>>, {id: number;data: UpdateProductDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiProductsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiProductsId>>>
    export type PutApiProductsIdMutationBody = UpdateProductDto
    export type PutApiProductsIdMutationError = unknown

    export const usePutApiProductsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductsId>>, TError,{id: number;data: UpdateProductDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiProductsId>>,
        TError,
        {id: number;data: UpdateProductDto},
        TContext
      > => {

      const mutationOptions = getPutApiProductsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiProductsId = (
    id: number,
 ) => {
      
      
      return customAxios<BooleanApiResponse>(
      {url: `http://localhost:8080/api/Products/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiProductsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductsId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteApiProductsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiProductsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiProductsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiProductsId>>>
    
    export type DeleteApiProductsIdMutationError = unknown

    export const useDeleteApiProductsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductsId>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiProductsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiProductsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiProductsLowStock = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxios<ProductDtoListApiResponse>(
      {url: `http://localhost:8080/api/Products/low-stock`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiProductsLowStockQueryKey = () => {
    return [`http://localhost:8080/api/Products/low-stock`] as const;
    }

    
export const getGetApiProductsLowStockQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductsLowStock>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsLowStock>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsLowStockQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductsLowStock>>> = ({ signal }) => getApiProductsLowStock(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductsLowStock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductsLowStockQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductsLowStock>>>
export type GetApiProductsLowStockQueryError = unknown


export function useGetApiProductsLowStock<TData = Awaited<ReturnType<typeof getApiProductsLowStock>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsLowStock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductsLowStock>>,
          TError,
          Awaited<ReturnType<typeof getApiProductsLowStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductsLowStock<TData = Awaited<ReturnType<typeof getApiProductsLowStock>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsLowStock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductsLowStock>>,
          TError,
          Awaited<ReturnType<typeof getApiProductsLowStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductsLowStock<TData = Awaited<ReturnType<typeof getApiProductsLowStock>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsLowStock>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProductsLowStock<TData = Awaited<ReturnType<typeof getApiProductsLowStock>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsLowStock>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductsLowStockQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



