/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * PetPet API
 * Backend API for PetPet online pet shop and adoption platform
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ObjectApiResponse
} from '../petPetAPI.schemas';

import { customAxios } from '../../axios';




export const getApiUserManagementProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxios<ObjectApiResponse>(
      {url: `http://localhost:8080/api/UserManagement/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUserManagementProfileQueryKey = () => {
    return [`http://localhost:8080/api/UserManagement/profile`] as const;
    }

    
export const getGetApiUserManagementProfileQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserManagementProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserManagementProfile>>> = ({ signal }) => getApiUserManagementProfile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUserManagementProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserManagementProfile>>>
export type GetApiUserManagementProfileQueryError = unknown


export function useGetApiUserManagementProfile<TData = Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementProfile>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementProfile<TData = Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementProfile>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementProfile<TData = Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUserManagementProfile<TData = Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementProfile>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUserManagementProfileQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiUserManagementPermissions = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxios<ObjectApiResponse>(
      {url: `http://localhost:8080/api/UserManagement/permissions`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUserManagementPermissionsQueryKey = () => {
    return [`http://localhost:8080/api/UserManagement/permissions`] as const;
    }

    
export const getGetApiUserManagementPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserManagementPermissionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserManagementPermissions>>> = ({ signal }) => getApiUserManagementPermissions(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUserManagementPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserManagementPermissions>>>
export type GetApiUserManagementPermissionsQueryError = unknown


export function useGetApiUserManagementPermissions<TData = Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementPermissions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementPermissions<TData = Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementPermissions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementPermissions<TData = Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUserManagementPermissions<TData = Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementPermissions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUserManagementPermissionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiUserManagementAdminDashboard = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxios<ObjectApiResponse>(
      {url: `http://localhost:8080/api/UserManagement/admin/dashboard`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUserManagementAdminDashboardQueryKey = () => {
    return [`http://localhost:8080/api/UserManagement/admin/dashboard`] as const;
    }

    
export const getGetApiUserManagementAdminDashboardQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserManagementAdminDashboardQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>> = ({ signal }) => getApiUserManagementAdminDashboard(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUserManagementAdminDashboardQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>>
export type GetApiUserManagementAdminDashboardQueryError = unknown


export function useGetApiUserManagementAdminDashboard<TData = Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementAdminDashboard<TData = Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementAdminDashboard<TData = Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUserManagementAdminDashboard<TData = Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAdminDashboard>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUserManagementAdminDashboardQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiUserManagementAccessCheckTargetUserId = (
    targetUserId: string,
 signal?: AbortSignal
) => {
      
      
      return customAxios<ObjectApiResponse>(
      {url: `http://localhost:8080/api/UserManagement/access-check/${targetUserId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUserManagementAccessCheckTargetUserIdQueryKey = (targetUserId: string,) => {
    return [`http://localhost:8080/api/UserManagement/access-check/${targetUserId}`] as const;
    }

    
export const getGetApiUserManagementAccessCheckTargetUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError = unknown>(targetUserId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserManagementAccessCheckTargetUserIdQueryKey(targetUserId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>> = ({ signal }) => getApiUserManagementAccessCheckTargetUserId(targetUserId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(targetUserId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUserManagementAccessCheckTargetUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>>
export type GetApiUserManagementAccessCheckTargetUserIdQueryError = unknown


export function useGetApiUserManagementAccessCheckTargetUserId<TData = Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError = unknown>(
 targetUserId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementAccessCheckTargetUserId<TData = Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError = unknown>(
 targetUserId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementAccessCheckTargetUserId<TData = Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError = unknown>(
 targetUserId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUserManagementAccessCheckTargetUserId<TData = Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError = unknown>(
 targetUserId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementAccessCheckTargetUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUserManagementAccessCheckTargetUserIdQueryOptions(targetUserId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiUserManagementStatusUserId = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return customAxios<ObjectApiResponse>(
      {url: `http://localhost:8080/api/UserManagement/status/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUserManagementStatusUserIdQueryKey = (userId: string,) => {
    return [`http://localhost:8080/api/UserManagement/status/${userId}`] as const;
    }

    
export const getGetApiUserManagementStatusUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError = unknown>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserManagementStatusUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>> = ({ signal }) => getApiUserManagementStatusUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUserManagementStatusUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>>
export type GetApiUserManagementStatusUserIdQueryError = unknown


export function useGetApiUserManagementStatusUserId<TData = Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError = unknown>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementStatusUserId<TData = Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError = unknown>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserManagementStatusUserId<TData = Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError = unknown>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUserManagementStatusUserId<TData = Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError = unknown>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserManagementStatusUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUserManagementStatusUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



