/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * PetPet API
 * Backend API for PetPet online pet shop and adoption platform
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddToCartDto,
  BooleanApiResponse,
  CartItemDtoApiResponse,
  CartSummaryDtoApiResponse,
  UpdateCartItemDto
} from '../petPetAPI.schemas';

import { customAxios } from '../../axios';




export const getApiCart = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxios<CartSummaryDtoApiResponse>(
      {url: `http://localhost:8080/api/Cart`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiCartQueryKey = () => {
    return [`http://localhost:8080/api/Cart`] as const;
    }

    
export const getGetApiCartQueryOptions = <TData = Awaited<ReturnType<typeof getApiCart>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCartQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCart>>> = ({ signal }) => getApiCart(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCartQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCart>>>
export type GetApiCartQueryError = unknown


export function useGetApiCart<TData = Awaited<ReturnType<typeof getApiCart>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCart>>,
          TError,
          Awaited<ReturnType<typeof getApiCart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCart<TData = Awaited<ReturnType<typeof getApiCart>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCart>>,
          TError,
          Awaited<ReturnType<typeof getApiCart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCart<TData = Awaited<ReturnType<typeof getApiCart>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiCart<TData = Awaited<ReturnType<typeof getApiCart>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCartQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteApiCart = (
    
 ) => {
      
      
      return customAxios<BooleanApiResponse>(
      {url: `http://localhost:8080/api/Cart`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiCartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCart>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCart>>, TError,void, TContext> => {

const mutationKey = ['deleteApiCart'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCart>>, void> = () => {
          

          return  deleteApiCart()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCartMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCart>>>
    
    export type DeleteApiCartMutationError = unknown

    export const useDeleteApiCart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCart>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiCart>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiCartMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiCartItems = (
    addToCartDto: AddToCartDto,
 signal?: AbortSignal
) => {
      
      
      return customAxios<CartItemDtoApiResponse>(
      {url: `http://localhost:8080/api/Cart/items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addToCartDto, signal
    },
      );
    }
  


export const getPostApiCartItemsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCartItems>>, TError,{data: AddToCartDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCartItems>>, TError,{data: AddToCartDto}, TContext> => {

const mutationKey = ['postApiCartItems'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCartItems>>, {data: AddToCartDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiCartItems(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiCartItemsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCartItems>>>
    export type PostApiCartItemsMutationBody = AddToCartDto
    export type PostApiCartItemsMutationError = unknown

    export const usePostApiCartItems = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCartItems>>, TError,{data: AddToCartDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiCartItems>>,
        TError,
        {data: AddToCartDto},
        TContext
      > => {

      const mutationOptions = getPostApiCartItemsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const putApiCartItemsCartItemId = (
    cartItemId: number,
    updateCartItemDto: UpdateCartItemDto,
 ) => {
      
      
      return customAxios<CartItemDtoApiResponse>(
      {url: `http://localhost:8080/api/Cart/items/${cartItemId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCartItemDto
    },
      );
    }
  


export const getPutApiCartItemsCartItemIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCartItemsCartItemId>>, TError,{cartItemId: number;data: UpdateCartItemDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiCartItemsCartItemId>>, TError,{cartItemId: number;data: UpdateCartItemDto}, TContext> => {

const mutationKey = ['putApiCartItemsCartItemId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiCartItemsCartItemId>>, {cartItemId: number;data: UpdateCartItemDto}> = (props) => {
          const {cartItemId,data} = props ?? {};

          return  putApiCartItemsCartItemId(cartItemId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiCartItemsCartItemIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiCartItemsCartItemId>>>
    export type PutApiCartItemsCartItemIdMutationBody = UpdateCartItemDto
    export type PutApiCartItemsCartItemIdMutationError = unknown

    export const usePutApiCartItemsCartItemId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCartItemsCartItemId>>, TError,{cartItemId: number;data: UpdateCartItemDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiCartItemsCartItemId>>,
        TError,
        {cartItemId: number;data: UpdateCartItemDto},
        TContext
      > => {

      const mutationOptions = getPutApiCartItemsCartItemIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiCartItemsCartItemId = (
    cartItemId: number,
 ) => {
      
      
      return customAxios<BooleanApiResponse>(
      {url: `http://localhost:8080/api/Cart/items/${cartItemId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiCartItemsCartItemIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartItemsCartItemId>>, TError,{cartItemId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartItemsCartItemId>>, TError,{cartItemId: number}, TContext> => {

const mutationKey = ['deleteApiCartItemsCartItemId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCartItemsCartItemId>>, {cartItemId: number}> = (props) => {
          const {cartItemId} = props ?? {};

          return  deleteApiCartItemsCartItemId(cartItemId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCartItemsCartItemIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCartItemsCartItemId>>>
    
    export type DeleteApiCartItemsCartItemIdMutationError = unknown

    export const useDeleteApiCartItemsCartItemId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartItemsCartItemId>>, TError,{cartItemId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiCartItemsCartItemId>>,
        TError,
        {cartItemId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiCartItemsCartItemIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    